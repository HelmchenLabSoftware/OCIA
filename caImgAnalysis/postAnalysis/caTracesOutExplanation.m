%% caTracesOut content explanation

clc;

o(['***********************************\n* caTracesOut content explanation *\n***********************************\n', ...
    'The convention here is to call each recording a *trial*, which might be called somewhere else a run or a', ...
    ' block.\n A *trial* corresponds here to a single continuous recording, event if it might contain several', ...
    ' presentation of stimuli.'], 0, 0);

% caTracesOutMat = load('E:\Analysis\Dayra\14060403_20140625_spot01_F1F2_odd.mat');
% caTracesOutMat = load('C:\Users\lorenzo\Documents\LabVIEW Data\OCIA\test.mat');
% caTracesOutMat = load('E:\Analysis\Dayra\14060403_20140625_spot01_F1F2_odd.mat');
% caTracesOutMat = load('D:\Users\BaL\PhD\Analysis\caTracesOut.mat');
caTracesOutMat = load('C:\Users\lorenzo\Documents\LabVIEW Data\OCIA\matfileoutput.mat');
o('\n# caTracesOut: structure containing all the outputs from the analysis: ', 0, 0);
caTracesOut = caTracesOutMat.caTracesOut %#ok<*NOPTS>

o('\n## caTracesOut.runs: structure containing the calcium traces for each filtering option:', 0, 0);
runs = caTracesOut.runs

o(['### caTracesOut.runs.(filter): calcium traces as a %d ROI(s) x %d trials(s) cell array, where each cell contains ', ...
    'a 1 x [nFrames] matrix of the calcium traces.\nFilters are ''unfilt'': unfiltered calcium traces and ', ...
    '''sgfilter'': Savitzky-Golay filtered calcium traces.'], size(caTracesOut.runs.unfilt), 0, 0);

o(['\n## caTracesOut.ROISet: %d ROIs x %d columns cell-array with one row per ROI and in the columns:\n column 1: ROI''s ID\n', ...
    ' column 2: %d x %d pixels logical mask defining the ROI''s area.'], size(caTracesOut.ROISet), size(caTracesOut.ROISet{1, 2}), ...
    0, 0);

o(['\n## caTracesOut.stim: stimulus vectors as a %d x %d trial(s) cell array, where each cell contains ', ...
    'a 1 x [nFrames] matrix of the stimulus vector.\nStimulus vectors are vectors of zeros with the same length ', ...
    'as the corresponding calcium trace for that trial, with a non-zero element [1/2/...] marking the onset of the stimulus.\n', ...
    'Each different non-zero element defines a new stimulus type: 1 defines onset of the first stimulus type,', ...
    ' 2 defines the onset of the second stimulus type and so on.'], size(caTracesOut.stim), 0, 0);

o(['\n## caTracesOut.PS: structure containing the peri-stimulus extracted calcium traces for each filtering option and', ...
    ' other things related to these peri-stimulus traces:'], 0, 0);
PS = caTracesOut.PS

o(['### caTracesOut.PS.PSFrames: structure containing the number of frames used for the peri-stimulus extraction: ', ...
    '%d ''base'' frame(s) and %d ''evoked'' frame(s).'], caTracesOut.PS.PSFrames.base, caTracesOut.PS.PSFrames.evoked, ...
    0, 0);

o(['\n### caTracesOut.PS.(filt): structure containing the raw (non-averaged) peri-stimulus traces for that filtering option and ', ...
    'the dimension reduced peri-stimulus traces (see explanation lower):'], 0, 0);
PSFilt = caTracesOut.PS.unfilt

o(['#### caTracesOut.PS.(filt).raw: ''raw'' peri-stimulus traces as a %d ROI(s) x %d stimulus type(s) cell array, where each ', ...
    'cell contains\n a %d trial(s) x %d frame(s) matrix of the peri-stimulus traces for that ROI and ', ...
    'that stimulus type.'], size(caTracesOut.PS.unfilt.raw), size(caTracesOut.PS.unfilt.raw{1, 1}), 0, 0);

o(['\n### caTracesOut.PS.(filt).trial: structure containing things related to the peri-stimulus traces reduced in', ...
    ' the dimension of the trials.\n Dimension reduction means for example the traces *averaged* for the trials, or the standard', ...
    ' error of the mean for all trials, etc.:'], 0, 0);
PSFiltTrial = caTracesOut.PS.unfilt.trial

o(['#### caTracesOut.PS.(filt).trial.mean: structure containing different versions of the peri-stimulus traces *averaged* for the', ...
    ' trials:'], 0, 0);
PSFiltTrialMean = caTracesOut.PS.unfilt.trial.mean

o(['##### caTracesOut.PS.(filt).trial.mean.N: number of trials on which the averaging was done:', ...
    ' average of %d trial(s).'], caTracesOut.PS.unfilt.trial.mean.N, 0, 0);

o(['\n##### caTracesOut.PS.(filt).trial.mean.all: averaged peri-stimulus frames containing *all* the peri-stimulus frames ', ...
    '(not just the evoked ones)\n as a %d frame(s) x %d ROI(s) x %d stimulus type(s) matrix.'], ...
    size(caTracesOut.PS.unfilt.trial.mean.all), 0, 0);

o(['\n##### caTracesOut.PS.(filt).trial.mean.evoked: averaged peri-stimulus frames containing only the *evoked* peri-stimulus frames ', ...
    '(from stimulus\n onset until the end of the peri-stimulus period) as a %d (evoked) frame(s) x %d ROI(s) x %d stimulus type(s) matrix.'], ...
    size(caTracesOut.PS.unfilt.trial.mean.evoked), 0, 0);

o(['\n##### caTracesOut.PS.(filt).trial.mean.allNorm: averaged peri-stimulus frames containing *all* the peri-stimulus frames ', ...
    '(not just the evoked ones),\n normalized to have the baseline at 0, as a %d frame(s) x %d ROI(s) x %d stimulus type(s) matrix.\n', ...
    ' This means that the before the averaging, the peri-stimulus calcium trace of each trial was subtracted by the mean of its baseline period.'], ...
    size(caTracesOut.PS.unfilt.trial.mean.allNorm), 0, 0);

o(['\n##### caTracesOut.PS.(filt).trial.mean.evokedNorm: averaged peri-stimulus frames containing only the *evoked* peri-stimulus frames ', ...
    '(from stimulus\n onset until the end of the peri-stimulus period), normalized to have the baseline at 0,', ...
    'as a %d (evoked) frame(s) x %d ROI(s) x %d stimulus type(s) matrix.\n', ...
    ' This means that the before the averaging, the peri-stimulus calcium trace of each trial was subtracted by the mean of its baseline period.'], ...
    size(caTracesOut.PS.unfilt.trial.mean.evokedNorm), 0, 0);

o(['\n#### caTracesOut.PS.(filt).trial.sem: structure containing different versions of the peri-stimulus traces, which', ...
    ' have been dimension reduced similarly as the aboved described ''mean'',\n except that instead of calculating', ...
    ' the average of the trials, the standard error of the mean was calculated.\n These traces represent thus the', ...
    ' error on the trials for each ROI and each stimulus types:'], 0, 0);
PSFiltTrialSEM = caTracesOut.PS.unfilt.trial.sem

o(['## caTracesOut.stats: structure containing some extracted statistical description of the data', ...
    'for each filtering option:'], 0, 0);
stats = caTracesOut.stats

o(['### caTracesOut.stats.(filt): structure containing some extracted statistical description of the data', ...
    'for a selected filtering option:'], 0, 0);
statsFilt = caTracesOut.stats.sgfilt

o(['#### caTracesOut.stats.(filt).evokedResp: structure containing the responsiveness index (evoked response) for each ROI and each stimulus type as a', ...
    ' %d stimulus type(s) x %d ROI(s) matrix in each field of the structure.\n All these metrics are based on', ...
    ' the trial-averaged peri-stimulus frames and are to be considered as a dimension reduction on the frame level.\n', ...
    ' These metrics are meant to summarize the responsiveness of each ROI for each stimulus type. Each field''s', ...
    ' name describes which method was used to obtain the responsiveness index for each ROI:', ...
    '\n - ''mean'' stands for the average of the values of the evoked frames.', ...
    '\n - ''max'' stands for the peak value (maximum) of the evoked frames.', ...
    '\n - ''median'' stands for the median of the values of the evoked frames.', ...
    '\n - ''sum'' stands for the sum of the values of the evoked frames.', ...
    '\n - ''max3pp'' stands for the 3-points-peak of the values of the evoked frames. The ''3-points-peak''', ...
    ' is the average of the 3 highest points (less sensitive to outlier maximum value).\n Moreover, each one', ...
    ' of these metric also has an error assessement: ''meanErr'', ''maxErr'', etc., which is the same method', ...
    ' (mean/max/etc.) applied\n to the standard error of the means of each trial (caTracesOut.PS.unfilt.trial.sem)', ...
    ' which can be useful to have an error bar on a tuning curve for example.'], ...
        size(caTracesOut.stats.sgfilt.evokedResp.mean), 0, 0);
statsFiltEvokedResp = caTracesOut.stats.sgfilt.evokedResp

o('#### caTracesOut.stats.(filt).interROIEvokedRespCorr: structure containing the inter-ROI correlation for each responsiveness index mentionned above:', ...
    0, 0);
statsFiltinterROIEvokedRespCorr = caTracesOut.stats.sgfilt.interROIEvokedRespCorr


o(0, 0);
